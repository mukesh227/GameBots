//game of amazons.cpp
code:://
#include<cstdio>
#include<algorithm>
#include<vector>
using namespace std;
int tot;
int time_count;
int main_mov;
struct pr
{
int score;
int pos;
};
bool operator < (pr x,pr y)
{
return (x.score < y.score);
}
int hi_lev;
vector<pr> vec;
struct matrix
{
int	mat[10][10];
int child_count, start, lev;
int score;

};
int tc=0;
matrix tree[200000];
matrix mata[5000];
int mat[10][10];
int score[10][10][2];
int ar[10][10];
int ta[10][10];
int ta2[10][10];
int score1,score2;
int main_score[5000];
int found,mm;

inline int get_mob2(int x,int y)
{
int ret=0;
if(x > 0) if(ar[x-1][y]==1000) ret--;
if(x< 9) if(ar[x+1][y]==1000) ret++;
if(x<9 && y<9 ) if(ar[x+1][y+1]==1000) ret++;
if(x > 0 && y > 0 ) if(ar[x-1][y-1] == 1000) ret++;
if(y<9) if(ar[x][y+1] ==1000) ret++; 
if(y>0) if(ar[x][y-1] ==1000) ret++; 
if(x<9 && y>0) if(ar[x+1][y-1] ==1000) ret++;
if(x>0 && y<9) if(ar[x-1][y+1] == 1000) ret++;

return ret;
}

inline	int get_mob(int rr,int ss)
{ int ret=0;
int x=rr,y=ss;
int ta[10][10];
for(int i=0;i<10;i++) for(int j=0;j<10;j++)
{
if(ar[i][j]==0) ta[i][j]=1000; else ta[i][j] = 10000;
}
ta[rr][ss]=0;



for(int i=x+1,j=y;i<10;i++)
{
if(ta[i][j]==1000)
{
ret++;

} else if(ta[i][j]==10000) break;
}

for(int i=x-1,j=y;i>=0;i--)
{
if(ta[i][j]==1000)
{
ret++;

} else if(ta[i][j]==10000) break;
}

for(int i=x,j=y+1;j<10;j++)
{
if(ta[i][j]==1000)
{


} else if(ta[i][j]==10000) break;
}

for(int i=x,j=y-1;j>=0;j--)
{

if(ta[i][j]==1000)
{


} else if(ta[i][j]==10000) break;
}

for(int i=x+1,j=y-1;i<10 && j>=0;i++,j--)
{

if(ta[i][j]==1000)
{


} else if(ta[i][j]==10000) break;
}

for(int i=x-1,j=y+1;i>=0 && j<10;i--,j++)
{

if(ta[i][j]==1000)
{
ret++;

} else if(ta[i][j]==10000) break;
}

for(int i=x+1,j=y+1;i<10 && j<10;i++,j++)
{

if(ta[i][j]==1000)
{
ret++;

} else if(ta[i][j]==10000) break;
}

for(int i=x-1,j=y-1;j>=0 && i>=0;j--,i--)
{

if(ta[i][j]==1000)
{
ret++;

} else break; //else if(ta[i][j]==10000) break;
}	



return ret;
}
inline int get_ter_sc(int x,int y)
{ int ret=0;
int ff=ta[x][y]; 
for(int i=x+1,j=y;i<10;i++)
{
if(ta[i][j]==1000)
{
ta[i][j] = ff+1; ret++;

} else break; //else if(ta[i][j]==10000) break;
}

for(int i=x-1,j=y;i>=0;i--)
{
if(ta[i][j]==1000)
{
ta[i][j] = ff+1; ret++;

} else break; //if(ta[i][j]==10000) break;
}

for(int i=x,j=y+1;j<10;j++)
{
if(ta[i][j]==1000)
{
ta[i][j] = ff+1; ret++;

} else break; //else if(ta[i][j]==10000) break;
}

for(int i=x,j=y-1;j>=0;j--)
{

if(ta[i][j]==1000)
{
ta[i][j] = ff+1; ret++;

} else break; //if(ta[i][j]==10000) break;
}

for(int i=x+1,j=y-1;i<10 && j>=0;i++,j--)
{

if(ta[i][j]==1000)
{
ta[i][j] = ff+1; ret++;

} else break; //if(ta[i][j]==10000) break;
}

for(int i=x-1,j=y+1;i>=0 && j<10;i--,j++)
{

if(ta[i][j]==1000)
{
ta[i][j] = ff+1; ret++;

} else break; //if(ta[i][j]==10000) break;
}

for(int i=x+1,j=y+1;i<10 && j<10;i++,j++)
{

if(ta[i][j]==1000)
{
ta[i][j] = ff+1; ret++;

} else break;//if(ta[i][j]==10000) break;
}

for(int i=x-1,j=y-1;j>=0 && i>=0;j--,i--)
{

if(ta[i][j]==1000)
{
ta[i][j] = ff+1; ret++;

} else break; //if(ta[i][j]==10000) break;
}	

return ret;

}


inline int get_score()
{
int mob1=0,mob2=0;
int tb=0;
time_count++;

for(int i=0;i<10;i++) for(int j=0;j<10;j++)
{
if(ar[i][j]==-1) ta[i][j]=10000;
if(ar[i][j]==2) ta[i][j]=10000;
if(ar[i][j]==0) ta[i][j]=1000,tb++;
if(ar[i][j]==1) ta[i][j]=0;
}


int c=0,x=0;
while(1)
{
for(int i=0;i<10;i++) for(int j=0;j<10;j++)
{
if(ta[i][j]==x)
{
c+=get_ter_sc(i,j);

int g=0;
if(x==0) g = get_mob2(i,j);
if(g>=4) g=5; else if(g == 3) g=4; 
mob1+=g;
}
}
if(x==0) mob1+=c;
if(c==0) break; c=0; x++;}


for(int i=0;i<10;i++) for(int j=0;j<10;j++)
{
ta2[i][j]=ta[i][j];
if(ar[i][j]==-1) ta[i][j]=10000;
if(ar[i][j]==2) ta[i][j]=0;
if(ar[i][j]==0) ta[i][j]=1000;
if(ar[i][j]==1) ta[i][j]=10000;
}
c=0,x=0;
while(1)
{

for(int i=0;i<10;i++) for(int j=0;j<10;j++)
{
if(ta[i][j]==x)
{
c+=get_ter_sc(i,j);
int g=0;
if(x==0) g = get_mob2(i,j);
if(g>4) g=5; 
mob2+=g; 

}
} if(x==0) mob2+=c;
if(c==0) break; c=0;x++;}




int s1=0;int s2=0;
for(int i=0;i<10;i++) for(int j=0;j<10;j++)
{
score[i][j][0]= 0;
score[i][j][1] = 0;
if(ta[i][j]>200 && ta2[i][j]>200) 
{
continue;
}
if(ta[i][j] < 200 && ta[i][j] >2) ta[i][j] = 0;
if(ta2[i][j] < 200 && ta2[i][j] >2) ta2[i][j] = 0;
if(ta[i][j]<200 && ta2[i][j]<200)
{
score[i][j][0] = ta[i][j] - ta2[i][j] ; if(score[i][j][0]>2) score[i][j][0]=3; if(score[i][j][0]<-2) score[i][j][0]=-3;
score[i][j][1] = -score[i][j][0]; if(score[i][j][1]>2) score[i][j][1]=3; if(score[i][j][1]<-2) score[i][j][1]=-3;
continue;
}

if(ta[i][j]>200) s1+=4;//score[i][j][0]=5,score[i][j][1]=0;
if(ta2[i][j]>200) s2+=4;//score[i][j][1]=5,score[i][j][0]=0;

}


score1=0,score2=0;
for(int i=0;i<10;i++) for(int j=0;j<10;j++)
{
score1+=score[i][j][0];
score2+=score[i][j][1];
}

/*	if(found == -1)
{
printf("Score 1 : %d\n",score1);
printf("Score 2 : %d\n",score2);
printf("MOB 1 : %d\n",mob1);
printf("MOB 2 : %d\n",mob2);
}
*/
//mob1=0,mob2=0;
int ggg = 1; if(tb > 50) ggg=2; if(tb>75) ggg=3; 
score1 += (s1-s2) + ggg *(mob1-mob2);
score2 += (s2 - s1) + ggg * (mob2 - mob1);
//int tmp1=score1-score2;
//int tmp2=score2-score1;
//score1 =tmp1 + (mob1-mob2);
//score2 =tmp2 + (mob2 - mob1);

/*	if(found == -1)
{
printf("Score 1 : %d\n",score1);
printf("Score 2 : %d\n",score2);
printf("MOB 1 : %d\n",mob1);
printf("MOB 2 : %d\n",mob2);
}
*/
}


inline void thro(int x,int y)
{
for(int i=x+1,j=y;i<10;i++)
{
if(mat[i][j]==0)
{
mat[i][j]=-1;
for(int a=0;a<10;a++) for(int b=0;b<10;b++) 
mata[found].mat[a][b]=mat[a][b],ar[a][b]=mat[a][b];
get_score(); 
//if(mm==1) 
main_score[found] = score1;
//	printf("main score %lf %d \n",main_score[found],found);
//	else main_score[found ] = score2;

if(found == -1) printf("me 1\n");
found++;

mat[i][j]=0;
} else break;
}

for(int i=x-1,j=y;i>=0;i--)
{
if(mat[i][j]==0)
{
mat[i][j]=-1;
for(int a=0;a<10;a++) for(int b=0;b<10;b++) 
mata[found].mat[a][b]=mat[a][b],ar[a][b]=mat[a][b];
get_score(); 
// if(mm==1) 
main_score[found ] = score1;
//	printf("main score %lf %d \n",main_score[found],found);
//	else main_score[found ] = score2;
if(found == -1) printf("me 2\n");
found++;

mat[i][j]=0;
} else break;
}

for(int i=x,j=y+1;j<10;j++)
{
if(mat[i][j]==0)
{
mat[i][j]=-1;
for(int a=0;a<10;a++) for(int b=0;b<10;b++) 
mata[found].mat[a][b]=mat[a][b],ar[a][b]=mat[a][b];
get_score(); 
//	if(mm==1) 
main_score[found ] = score1;
//	printf("main score %lf %d \n",main_score[found],found);
//	else main_score[found ] = score2;
if(found == -1) printf("me 3\n");
found++;
mat[i][j]=0;
} else break;
}

for(int i=x,j=y-1;j>=0;j--)
{
if(mat[i][j]==0)
{
mat[i][j]=-1;
for(int a=0;a<10;a++) for(int b=0;b<10;b++) 
mata[found].mat[a][b]=mat[a][b],ar[a][b]=mat[a][b];
get_score(); 
//if(mm==1) 
main_score[found ] = score1;
//	printf("main score %lf %d \n",main_score[found],found);
//	else main_score[found ] = score2;
if(found == -1) printf("me 4\n");
found++;
mat[i][j]=0;
} else break;
}

for(int i=x+1,j=y-1;i<10 && j>=0;i++,j--)
{
if(mat[i][j]==0)
{ 
mat[i][j]=-1;
for(int a=0;a<10;a++) for(int b=0;b<10;b++) 
mata[found].mat[a][b]=mat[a][b],ar[a][b]=mat[a][b];
get_score(); 
//	if(mm==1) 
main_score[found ] = score1;
//	printf("main score %lf %d \n",main_score[found],found);
//	else main_score[found ] = score2;
if(found == -1) printf("me 5\n");
found++;
mat[i][j]=0;
} else break;
}

for(int i=x-1,j=y+1;i>=0 && j<10;i--,j++)
{
if(mat[i][j]==0)
{ 
mat[i][j]=-1;
for(int a=0;a<10;a++) for(int b=0;b<10;b++) 
mata[found].mat[a][b]=mat[a][b],ar[a][b]=mat[a][b];
get_score(); 
//	if(mm==1)
main_score[found ] = score1;
//	printf("main score %lf %d \n",main_score[found],found);
//	else main_score[found ] = score2;
if(found == -1) printf("me 6\n");
found++;
mat[i][j]=0;
} else break;
}

for(int i=x+1,j=y+1;i<10 && j<10;i++,j++)
{
if(mat[i][j]==0)
{
mat[i][j]=-1;
for(int a=0;a<10;a++) for(int b=0;b<10;b++) 
mata[found].mat[a][b]=mat[a][b],ar[a][b]=mat[a][b];
get_score(); 
//	if(mm==1)
main_score[found ] = score1;
//	printf("main score %lf %d \n",main_score[found],found);
//	else main_score[found ] = score2;
if(found == -1) 
{
//	printf("me 7\n");
//	printf("Score : %d and %d\n",score1,score2);
//	printf("Score : %d and %d\n",main_score[found][0],main_score[found][1]);
}
found++;
mat[i][j]=0;
} else break;
}

for(int i=x-1,j=y-1;j>=0 && i>=0;j--,i--)
{
if(mat[i][j]==0)
{
mat[i][j]=-1;
for(int a=0;a<10;a++) for(int b=0;b<10;b++) 
mata[found].mat[a][b]=mat[a][b],ar[a][b]=mat[a][b];
get_score(); 
//	if(mm==1) 
main_score[found ] = score1;
//	printf("main score %lf %d \n",main_score[found],found);
//	else main_score[found ] = score2;
if(found == -1) printf("me 8\n");
found++;
mat[i][j]=0;
} else break;
}	
}
inline void solve(int x,int y)
{
//	printf("entered solve %d\n",time_count);
mat[x][y]=0;
for(int i=x+1,j=y;i<10;i++)
{
if(mat[i][j]==0)
{
mat[i][j]=mm;
thro(i,j);
mat[i][j]=0;
} else break;
}

for(int i=x-1,j=y;i>=0;i--)
{
if(mat[i][j]==0)
{
mat[i][j]=mm;
thro(i,j);
mat[i][j]=0;
} else break;
}

for(int i=x,j=y+1;j<10;j++)
{
if(mat[i][j]==0)
{
mat[i][j]=mm;
thro(i,j);
mat[i][j]=0;
} else break;
}

for(int i=x,j=y-1;j>=0;j--)
{
if(mat[i][j]==0)
{
mat[i][j]=mm;
thro(i,j);
mat[i][j]=0;
} else break;
}

for(int i=x+1,j=y-1;i<10 && j>=0;i++,j--)
{
if(mat[i][j]==0)
{
mat[i][j]=mm;
thro(i,j);
mat[i][j]=0;
} else break;
}

for(int i=x-1,j=y+1;i>=0 && j<10;i--,j++)
{
if(mat[i][j]==0)
{
mat[i][j]=mm;
thro(i,j);
mat[i][j]=0;
} else break;
}

for(int i=x+1,j=y+1;i<10 && j<10;i++,j++)
{
if(mat[i][j]==0)
{
mat[i][j]=mm;
thro(i,j);
mat[i][j]=0;
} else break;
}

for(int i=x-1,j=y-1;j>=0 && i>=0;j--,i--)
{
if(mat[i][j]==0)
{
mat[i][j]=mm;
thro(i,j);
mat[i][j]=0;
} else break;
}
mat[x][y]=mm;

//printf("left solve %d\n",time_count);
}
void do_it(int lev)
{
//	printf("entered do_it tc is %d\n",time_count);
if(lev%2 == 0) mm = main_mov;
else 
{
if(main_mov==1) mm = 2;
else mm=1; 
}

found=0;
for(int i=0;i<10;i++)for(int j=0;j<10;j++)
if(mat[i][j]==mm) solve(i,j);
//printf(" left do_it\n");
}

vector<pr> tv;
inline void rec(int node,int lev)
{ 

//printf("Called %d %d \n",node,tc);
hi_lev = lev;
int tmp_tc=tc;
/*
if(node<-9)
{

for(int i=0;i<10;i++) 
{
for(int j=0;j<10;j++) if(tree[node].mat[i][j]<0) printf(" %d",tree[node].mat[i][j]);
else printf(" %d",tree[node].mat[i][j]);
printf("\n");
}


printf("%%%%%%%%%%%%%%%\n");
for(int i=0;i<10;i++) 
{
for(int j=0;j<10;j++) if(mat[i][j]<0) printf(" %d",mat[i][j]);
else printf(" %d",mat[i][j]);
printf("\n");
}
}
*/
tree[node].start = tc;
//if(node<-9)
//{
//	printf(" called %d \n",node);
//printf(" node %d %d\n",node,tree[node].start);
//}

do_it(lev);
//	printf(" done \n");
tv.clear();
if(node<-9) printf(" node = %d yes doing %d %d\n",node,lev,found);
//for(int i=0;i<found;i++) printf(" found %d its %lf\n",i,main_score[i]);

if(time_count > 150000) return ;
for(int i=0;i<found;i++)
{
pr pp; pp.score = main_score[i]; pp.pos = i; tv.push_back(pp);
}
sort(tv.begin(),tv.end());


//	for(int i=0;i<found;i++)
//printf(" after sort found %d its %lf\n",i,tv[i].score);

//printf(" sorted\n");
int len=tv.size(); if(len>80) len=80;


tree[node].child_count = len;
//	if(node<4) printf("childe count is %d\n",tree[node].child_count );
tree[node].lev=lev;
if(lev&1) 
{


for(int i=0;i<len;i++)
{
int tt=tv[i].pos;
tree[tc].score = tv[i].score;
tree[tc].lev = lev+1;
//	printf(" putting score %lf\n",tv[i].score);
for(int i=0;i<10;i++) for(int j=0;j<10;j++) 
tree[tc].mat[i][j]=mata[tt].mat[i][j];
tc++;
}

}
else
{


int ps =(int) tv.size(); ps--;

for(int i=0;i<len;i++)
{
int tt=tv[ps-i].pos;
tree[tc].score = tv[ps-i].score;
tree[tc].lev = lev+1;
//	printf(" putting score 333 %lf\n",tv[ps-i].score);
for(int a=0;a<10;a++) for(int b=0;b<10;b++) 
tree[tc].mat[a][b]=mata[tt].mat[a][b];
tc++;
}

}
tv.clear();
if(tc == node) return;
for(int a=0;a<10;a++) for(int b=0;b<10;b++) 
mat[a][b]=tree[1+node].mat[a][b];
rec(1+node,tree[1+node].lev);

}

void evaluate(int node)
{
//	printf("entere tc = %d\n",tc);
if(tree[node].lev == hi_lev) return ;
if(tree[node].child_count == 0) return;
//	printf(" caleed here %d \n",node); 
int lev = tree[node].lev;

int cs = tree[node].start;

// printf("cs is %d\n",cs);
for(int i=0;i<tree[node].child_count;i++)
{
evaluate( cs+i);	
}

//printf(" here \n"); 

if(lev & 1)
{
int mn = 10000;
for(int i=0;i<tree[node].child_count;i++)
{
if(tree[i+cs].score < mn) mn=	tree[i+cs].score;
}
tree[node].score=mn;
}

else
{
int mx = -10000;
for(int i=0;i<tree[node].child_count;i++)
{
if(tree[i+cs].score > mx) mx=	tree[i+cs].score;
}
tree[node].score=mx;
}


//printf("left \n");
}
int main()
{

int tmp_mat[10][10];	
for(int i=0;i<10;i++) for(int j=0;j<10;j++) scanf("%d",&mat[i][j]);
scanf("%d",&mm);
for(int i=0;i<10;i++)for(int j=0;j<10;j++) tree[0].mat[i][j] = tmp_mat[i][j] = mat[i][j];
main_mov = mm;
tc=1;
rec(0,0);
//printf("half %d\n",hi_lev);
evaluate(0);
int ans;
int mx=-10000;
int cs = tree[0].start;
for(int i=0;i<tree[0].child_count;i++)
if(tree[cs+i].score > mx) mx = tree[cs+i].score , ans = cs+i;	

//	printf(" cs is %d ans size %d lev %d\n",tree[9].start,tree[9].child_count,tree[409].lev);

for(int i=0;i<10;i++) for(int j=0;j<10;j++) mat[i][j]=tmp_mat[i][j];

mm = main_mov;
int tx,ty,fx,fy,trox,troy;
for(int i=0;i<10;i++) for(int j=0;j<10;j++)
{

if(mat[i][j]==mm && tree[ans].mat[i][j]!=mm) fx=i,fy=j;
if(mat[i][j]!=-1 && tree[ans].mat[i][j]==-1) trox=i,troy=j;
if(mat[i][j]==0 && tree[ans].mat[i][j]==mm) tx=i,ty=j;
}

//	printf(" hi lev is %d\n",hi_lev);
//	printf(" time count %d\n",time_count);
printf("%d %d\n",fx,fy);
printf("%d %d\n",tx,ty);
printf("%d %d\n",trox,troy);

printf("%d\n",mx);;
printf("%d\n",hi_lev);
//	printf("tree 12 score %d\n",tree[0].score);
//	for(int i=0;i<16;i++)
//	printf("%d\n",tree[i+409].score);
//	printf("socre 109 %d\n",main_score[109][1]);
//	for(int i=0;i<10;i++) 
//	{
//	for(int j=0;j<10;j++) if(tree[409].mat[i][j]<0) printf(" %d",tree[409].mat[i][j]);
//	else printf(" %d",tree[409].mat[i][j]);
//	printf("\n");
//	}



}
